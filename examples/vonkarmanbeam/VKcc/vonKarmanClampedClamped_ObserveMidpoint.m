%% Finding a 2D SSM for a von K치rm치n beam
% 
% 
% This is an example of how to reconstruct a slow 2D SSM of a mechanical system 
% using synthetic measurements of a scalar quantity. In this example, we measure 
% the middle point displacement of a clamped-clamped von K치rm치n beam.

clearvars
close all
clc
%% Example setup

nElements = 12;
[M,C,K,fnl,f_vec,outdof, PlotFieldonDefMesh] = build_model(nElements);
n = size(M,1);    % mechanical dofs (axial def, transverse def, angle)
[F, lambda] = functionFromTensors(M, C, K, fnl);
%% Generation of Synthetic Data

nTraj = 2;
indTest = [1];
indTrain = setdiff(1:nTraj, indTest);
%% 

loadvector = [1.75 2].*f_vec;
w0 = -K\loadvector(:,1); % linear initial guess
IC = zeros(2*n,nTraj);
options = optimoptions('fsolve', 'MaxFunctionEvaluations', 200*n, 'Display', 'off');
for iLoad = 1:nTraj
    f_eq = @(w)([zeros(n) M]*F(0,[w; zeros(n,1)]) + loadvector(:,iLoad));
    [w0, ~, exitflag, output] = fsolve(f_eq, w0, options);
    if exitflag <= 0
        error('Warning: No solution found for loading configuration')
    end
    IC(:,iLoad) = [w0; zeros(n,1)];
end
figure; PlotFieldonDefMesh(w0,200)

%% 
% 
% 
% The data is generated by time-integration of the right-hand side of the system. 
% In this case we are observing the end tip displacement, so the |observable| 
% function is selected to save only the transverse displacement of the leftmost 
% element. We also make sure that the data is sampled with a sufficiently high 
% frequency.

new_meas = 0;
observable = @(x) x(outdof,:);
if new_meas == 1
    tEnd = 30;
    nSamp = fix(50 * tEnd * abs(imag(lambda(1))) / (2*pi));
    dt = tEnd/(nSamp-1);
    tic
    xData = integrateTrajectories(F, observable, tEnd, nSamp, nTraj, IC);
    toc
    DataInfo = struct('nElements',nElements,'loadvector',loadvector);
    FullTrajectories = xData;
    save('data_VKcc.mat','DataInfo','FullTrajectories')
else
    load data_VKcc.mat
    if nElements ~= DataInfo.nElements
       error('The loaded data comes from a model with a different number of elements.') 
    end
    xData = cell(size(FullTrajectories,1),2);
    for ii = 1:size(FullTrajectories,1)
        xData{ii,1} = FullTrajectories{ii,1}; 
        xData{ii,2} = observable(FullTrajectories{ii,2});
    end
    tEnd = FullTrajectories{1,1}(end);
end
%
figure(28); clf;
plot(xData{1,1}, xData{1,2}, xData{2,1}, xData{2,2}, ':');
xlabel('$t \, [$s$]$','Interpreter','latex'); ylabel('$u \, [$m$]$','Interpreter','latex'); 
legend({'trajectory 1', 'trajectory 2'})
set(gca,'fontname', 'helvetica'); set(gca,'fontsize', 18); title('Generated data')

%% Delay embedding

SSMDim = 2;
overEmbed = 0;
yData = coordinates_embedding(xData, SSMDim, 'OverEmbedding', overEmbed);
%% Data filtering

showSpectrogram(yData(indTrain,:), 1);
ylim([0,50])
%% 
% We plot the tip displacement  over time for closer inspection. 

plot(xData{1,1}, xData{1,2}, xData{2,1}, xData{2,2}, ':');
xlabel('$t \, [$s$]$','Interpreter','latex'); ylabel('$u \, [$m$]$','Interpreter','latex'); 
legend({'trajectory 1', 'trajectory 2'})
set(gca,'fontname', 'helvetica'); set(gca,'fontsize', 18); title('Generated data')
%% 

sliceInt = [1, tEnd];
yDataTrunc = sliceTrajectories(yData, sliceInt);
%% Datadriven manifold fitting

SSMOrder = 1;
[V, SSMFunction, mfdInfo] = IMparametrization(yDataTrunc(indTrain,:), SSMDim, SSMOrder);
%% Plot and validation
% 
% Now that we have computed the eigenspace of the manifold, we pass to the reduced 
% coordinates $y$ by projecting all trajectories onto the eigenspace. 

etaData = getProjectedTrajs(yData, V);
etaDataTrunc = getProjectedTrajs(yDataTrunc, V);
%% 

plotReducedCoords(etaData);
legend({'Test set trajectory', 'Training set trajectory'})
%% 
% Furthermore, we draw the end tip component of the manifold shape along with 
% the trajectory from the training set. 

plotSSMWithTrajectories(yDataTrunc(indTrain,:), SSMFunction, 1, V, 10, 'SSMDimension', SSMDim)
view(-100,20); zlabel('$u \, [$m$]$','Interpreter','latex')
%% Reduced order model

ROMOrder = 7;
[~,Tinv,N,T,NormalFormInfo] = IMdynamics_flow(etaDataTrunc(indTrain,:),'R_PolyOrd',ROMOrder,'style', 'normalform');

zData = transformComplex(Tinv, etaDataTrunc);
[zRec, yRecNormal] = integrateFlows(N, zData, @(q) SSMFunction(T(q)));
etaRecNormal = transformComplex(T, zRec);

% The error RRMSE is computed as the average distance of the predicted trajectory 
% to the measured one in the full state space.

[reducedTrajDist, fullTrajDist] = computeRecDynErrors(etaRecNormal, yRecNormal, etaDataTrunc, yDataTrunc);
RRMSE_normal = mean(fullTrajDist(indTest))

plotReducedCoords(etaDataTrunc(indTest(1),:), etaRecNormal(indTest(1),:))
legend({'Test set (truncated)', 'Prediction'})

plotReconstructedTrajectory(yData(indTest(1),:), yRecNormal(indTest(1),:), 1, 'm')
legend({'Test set', 'Prediction'}); ylabel('$u \, [$m$]$','Interpreter','latex')

%%
% Finally we compare the estimated eigenvalues of the continuous evolution function 
% to the ones computed from the linearized system. 

DSEigenvalues = lambda(1:SSMDim)
normalFormEigenvalues = computeEigenvaluesFlow(NormalFormInfo)
%% Backbone curves

N_info = NormalFormInfo.N;
[damp, freq] = polarnormalform(N_info.coeff, N_info.exponents, N_info.phi);
figure
maxRho = abs(zData{indTest(1),2}(1,1));
[dmp, frq, amp, rho_plot] = backbonecurves(damp, freq, SSMFunction, T, 1, maxRho,'norm');
subplot(121); ylabel('$u \, [$m$]$','Interpreter','latex')
subplot(122); ylabel('$u \, [$m$]$','Interpreter','latex')
%% 
% The data-driven model can now be used for forced response predictions. We 
% first compute forced response using the full model with SSMTool that are used, 
% after calibration, to validate the predictions of our data-driven reduced-order 
% model.

% Compute with SSMTool
f_full = 5e-4*[4 8 12];
w_span = [30 37];
FRC_full = getFRC_full(M, C, K, fnl, f_vec, f_full, outdof, w_span, ROMOrder); close all

% Calibration based on the maximal amplitude response of a validation FRC
idx_f_full = 1;
amp_max = max(FRC_full.(['F' num2str(idx_f_full)]).Amp);
[~,pos] = min(abs(amp-amp_max));
rho_max = rho_plot(pos);
f_red = abs(damp(rho_max)*rho_max) * f_full/f_full(idx_f_full);
ratio_force_data_full = f_red/f_full(idx_f_full);

% Compute with data-driven model
ddROM = struct('Dim',SSMDim,'Param',SSMFunction,'CCtoNormal',Tinv,'ReducedDynNormal',N,'CCfromNormal',T);
FRC_data = getFRC_ddROM(ddROM,f_red,w_span,1);

%%
% Plot
figure(100); clf; hold on; grid on; box on; colors = colororder;
plot(frq, amp,'k','DisplayName', 'Backbone - SSMlearn')% $\mathcal{O}(7)$
for ii = 1:length(f_full)
    freq_i = FRC_full.(['F' num2str(ii)]).Freq;
    amp_i  = FRC_full.(['F' num2str(ii)]).Amp;
    stab_i = FRC_full.(['F' num2str(ii)]).Stab;
    [~,pos] = find(abs(diff(stab_i))==1);
    if isempty(pos)==1
        h_i = plot(freq_i,amp_i,'Color',colors(1,:),'Linewidth',2,...
            'DisplayName', 'FRC stable - SSMtool');
    else
        h_i = plot(freq_i(1:pos(1)),amp_i(1:pos(1)),'Color',colors(1,:),'Linewidth',2,...
            'DisplayName', 'FRC stable - SSMtool');
        if length(pos)>1
            h_ii = plot(freq_i(pos(1)+1:pos(2)),amp_i(pos(1)+1:pos(2)),'--','Color',colors(1,:),'Linewidth',2,...
                'DisplayName', 'FRC unstable -  SSMtool');
            h_iii = plot(freq_i(pos(2)+1:end),amp_i(pos(2)+1:end),'Color',colors(1,:),'Linewidth',2);
            h_iii.Annotation.LegendInformation.IconDisplayStyle = 'off';
            
        else
            h_ii = plot(freq_i(pos(1)+1:end),amp_i(pos(1)+1:end),'--','Color',colors(1,:),'Linewidth',2,...
                'DisplayName', 'FRC unstable -  SSMTool');
        end
        if ii~= 1; h_i.Annotation.LegendInformation.IconDisplayStyle = 'off';
            h_ii.Annotation.LegendInformation.IconDisplayStyle = 'off'; end
    end
end
for ii = 1:length(f_red)
    freq_i = FRC_data.(['F' num2str(ii)]).Freq;
    amp_i  = FRC_data.(['F' num2str(ii)]).Amp;
    stab_i = FRC_data.(['F' num2str(ii)]).Stab;
    [~,pos] = find(abs(diff(stab_i))==1);
    if isempty(pos)==1
        h_i = plot(freq_i,amp_i,'Color',colors(2,:),'Linewidth',2,...
            'DisplayName', 'FRC stable - SSMlearn');
    else
        h_i = plot(freq_i(1:pos(1)),amp_i(1:pos(1)),'Color',colors(2,:),'Linewidth',2,...
            'DisplayName', 'FRC stable - SSMlearn');
        h_ii = plot(freq_i(pos(1)+1:pos(2)),amp_i(pos(1)+1:pos(2)),'--','Color',colors(2,:),'Linewidth',2,...
            'DisplayName', 'FRC unstable - SSMlearn');
        h_iii = plot(freq_i(pos(2)+1:end),amp_i(pos(2)+1:end),'Color',colors(2,:),'Linewidth',2);
        h_iii.Annotation.LegendInformation.IconDisplayStyle = 'off';
        if ii~= 1; h_i.Annotation.LegendInformation.IconDisplayStyle = 'off';
            h_ii.Annotation.LegendInformation.IconDisplayStyle = 'off'; end
    end
end
xlabel('$\Omega \, [$rad/s$]$','Interpreter','latex')
ylabel('$u \, [$m$]$','Interpreter','latex')
set(gca,'fontname','helvetica')
set(gca,'fontsize',18)
legend('location','NW')
xlim([w_span(1)+1 w_span(2)-1])

%% Numerical Integration
if new_meas == 1
    w_0 = w_span(1);
    Npers = 50;
    f_veci = M\f_vec;
    x_sim = zeros(1,2*n);
    for jj = 1:length(f_full)
        F_force = @(t,x,w) F(t,x) + [zeros(n,1); f_veci*f_full(jj)*cos(w*t)];
        [t_sim,x_sim] = ode15s(@(t,x) F_force(t,x,w_0),[0 Npers*2*pi/w_0], transpose(x_sim(end,:)));
    end
    t_sim = t_sim'; x_sim = x_sim';
    figure
    plot(t_sim,x_sim(outdof,:))
    
    [t_sim,x_sim] = ode15s(@(t,x) F_force(t,x,w_0),[0 3*Npers*2*pi/w_0], x_sim(:,end));
    t_sim = t_sim'; x_sim = x_sim';
    figure
    plot(t_sim,x_sim(outdof,:))
    
    w_sweep = w_span(1):0.1:w_span(2);
    u_sweep = zeros(1,length(w_sweep)); x_sim_i = x_sim;
    [~,x_PO] = ode15s(@(t,x) F_force(t,x,w_0),[0 1*2*pi/w_0], x_sim_i(:,end));
    u_sweep(1) = max(abs(x_PO(:,outdof)));
    Npers = 30;
    
    for ii = 2:length(w_sweep)
        disp(['computing FRC point ', num2str(ii), ' of ', num2str(length(w_sweep))])
        [~,x_sim_i] = ode15s(@(t,x) F_force(t,x,w_sweep(ii)),[0 Npers*2*pi/w_sweep(ii)], x_sim_i(:,end));
        x_sim_i = x_sim_i';
        [~,x_PO] = ode15s(@(t,x) F_force(t,x,w_sweep(ii)),[0 1*2*pi/w_sweep(ii)], x_sim_i(:,end));
        u_sweep(ii) = max(abs(x_PO(:,outdof)));
    end
    
    DataInfo = struct('nElements',nElements,'IC_loadvector',loadvector,'FRC_force',f_veci*f_full(jj),'FRC_ampcoord',outdof);
    FullTrajectories = xData;
    FRC_NI = struct('omega',w_sweep,'amp',u_sweep);
    save('data_VKcc.mat','DataInfo','FullTrajectories','FRC_NI')
end
%%
figure(100);
plot(FRC_NI.omega,FRC_NI.amp,'c.','MarkerSize',24,'DisplayName','Numerical integration')
